"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[53],{1109:i=>{i.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"documentationSidebar":[{"type":"link","label":"Tutorial Intro","href":"/docs/intro","docId":"intro"},{"type":"category","label":"Tutorial","items":[{"type":"link","label":"Create a Document","href":"/docs/tutorial-basics/create-a-document","docId":"tutorial-basics/create-a-document"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Data Binding","items":[{"type":"link","label":"The DataContext","href":"/docs/data-binding/the-datacontext","docId":"data-binding/the-datacontext"},{"type":"link","label":"Change Notifications","href":"/docs/data-binding/change-notifications","docId":"data-binding/change-notifications"},{"type":"link","label":"Bindings","href":"/docs/data-binding/bindings","docId":"data-binding/bindings"},{"type":"link","label":"Binding Classes","href":"/docs/data-binding/binding-classes","docId":"data-binding/binding-classes"}],"collapsed":true,"collapsible":true,"href":"/docs/data-binding/"},{"type":"category","label":"Animations","items":[{"type":"link","label":"Keyframe Animations","href":"/docs/animations/keyframe-animations","docId":"animations/keyframe-animations"},{"type":"link","label":"Transitions","href":"/docs/animations/transitions","docId":"animations/transitions"},{"type":"link","label":"PageTransitions","href":"/docs/animations/pageTransitions","docId":"animations/pageTransitions"}],"collapsed":true,"collapsible":true,"href":"/docs/animations/"}],"apiSidebar":[{"type":"link","label":"Avalonia.Animations","href":"/docs/api/Avalonia-Animation/Animators","docId":"api/Avalonia-Animation/Animators"}],"guideSidebar":[{"type":"category","label":"Basics","items":[{"type":"link","label":"Introduction to XAML","href":"/docs/guides/basics/introduction-to-xaml","docId":"guides/basics/introduction-to-xaml"},{"type":"link","label":"Code-behind","href":"/docs/guides/basics/code-behind","docId":"guides/basics/code-behind"},{"type":"link","label":"MVVM Architecture","href":"/docs/guides/basics/mvvm","docId":"guides/basics/mvvm"},{"type":"link","label":"Accessing the UI thread","href":"/docs/guides/basics/accessing-the-ui-thread","docId":"guides/basics/accessing-the-ui-thread"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Deep Dives","items":[{"type":"link","label":"Running your Avalonia app on a Raspberry Pi with Raspbian Lite","href":"/docs/guides/deep-dives/running-on-raspbian-lite-via-drm","docId":"guides/deep-dives/running-on-raspbian-lite-via-drm"}],"collapsed":true,"collapsible":true}]},"docs":{"animations/index":{"id":"animations/index","title":"\ud83d\udd11 Animations","description":"There are two types of animations in Avalonia:","sidebar":"documentationSidebar"},"animations/keyframe-animations":{"id":"animations/keyframe-animations","title":"Keyframe Animations","description":"Keyframe animations in Avalonia are heavily inspired by CSS Animations. They can be used to animate any number of properties on a control, using any number of keyframes to define the states that each property must pass through. Keyframe animations can run any number of times, in either direction.","sidebar":"documentationSidebar"},"animations/pageTransitions":{"id":"animations/pageTransitions","title":"PageTransitions","description":"PageTransitions are used to render a transition between two views, for example in a Carousel or TransitioningContentControl","sidebar":"documentationSidebar"},"animations/transitions":{"id":"animations/transitions","title":"Transitions","description":"Transitions in Avalonia are also heavily inspired by CSS Animations. They listen to any changes in target property\'s value and subsequently animates the change according to its parameters. They can be defined on any Control via Transitions property:","sidebar":"documentationSidebar"},"api/Avalonia-Animation/Animators":{"id":"api/Avalonia-Animation/Animators","title":"Animators","description":"","sidebar":"apiSidebar"},"api/namespaces":{"id":"api/namespaces","title":"Namespaces","description":""},"data-binding/binding-classes":{"id":"data-binding/binding-classes","title":"Binding Classes","description":"In Avalonia, you also can bind classes. Sometimes it could be useful to switch classes depending on some logic, and for those purposes, you can use Binding Classes API. There is the sample usage of Binding Classes. We have two different styles and we want to switch between them depending on MyProperty state.","sidebar":"documentationSidebar"},"data-binding/bindings":{"id":"data-binding/bindings","title":"Bindings","description":"You bind in XAML using the  markup extension. By using bindings \\\\(assuming you\'ve implemented change notifications\\\\) any changes to the data context will automatically be updated in the control.","sidebar":"documentationSidebar"},"data-binding/change-notifications":{"id":"data-binding/change-notifications","title":"Change Notifications","description":"Property Changes","sidebar":"documentationSidebar"},"data-binding/index":{"id":"data-binding/index","title":"\ud83d\udd04 Data Binding","description":"Data binding provides a simple way to get data into your application\'s UI without having to set properties on each control each time a value changes.","sidebar":"documentationSidebar"},"data-binding/the-datacontext":{"id":"data-binding/the-datacontext","title":"The DataContext","description":"The Control.DataContext property describes where controls will look by default for values when binding. The data context will usually be set for top-level controls such as Window and child controls will inherit this data context.","sidebar":"documentationSidebar"},"guides/basics/accessing-the-ui-thread":{"id":"guides/basics/accessing-the-ui-thread","title":"Accessing the UI thread","description":"A Dispatcher provides services for managing work items on a specific thread. In Avalonia you will usually have only one Dispatcher, the one that handles the UI thread. Whenever you need to update the UI from a different thread than the UI thread, you need to access the UI thread via the running Dispatcher.","sidebar":"guideSidebar"},"guides/basics/code-behind":{"id":"guides/basics/code-behind","title":"Code-behind","description":"Window and UserControl files also have an associated code-behind file which usually has the extension .xaml.cs or .axaml.cs and may be displayed collapsed under the XAML file in your editor. Below you can see a MainWindow.xaml file along with its markdown file MainWindow.xaml.cs in Visual Studio:","sidebar":"guideSidebar"},"guides/basics/introduction-to-xaml":{"id":"guides/basics/introduction-to-xaml","title":"Introduction to XAML","description":"Avalonia uses XAML to define user-interfaces. XAML is an XML-based markup language that is used by many UI frameworks.","sidebar":"guideSidebar"},"guides/basics/mvvm":{"id":"guides/basics/mvvm","title":"MVVM Architecture","description":"Understanding the Model-View-ViewModel architectural pattern.","sidebar":"guideSidebar"},"guides/deep-dives/running-on-raspbian-lite-via-drm":{"id":"guides/deep-dives/running-on-raspbian-lite-via-drm","title":"Running your Avalonia app on a Raspberry Pi with Raspbian Lite","description":"This tutorial shows you how to run your Avalonia app on a Raspberry Pi with Raspbian Lite","sidebar":"guideSidebar"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let\'s discover Docusaurus in less than 5 minutes.","sidebar":"documentationSidebar"},"tutorial-basics/congratulations":{"id":"tutorial-basics/congratulations","title":"Congratulations!","description":"You have just learned the basics of Docusaurus and made some changes to the initial template."},"tutorial-basics/create-a-blog-post":{"id":"tutorial-basics/create-a-blog-post","title":"Create a Blog Post","description":"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed..."},"tutorial-basics/create-a-document":{"id":"tutorial-basics/create-a-document","title":"Create a Document","description":"Documents are groups of pages connected through:","sidebar":"documentationSidebar"},"tutorial-basics/create-a-page":{"id":"tutorial-basics/create-a-page","title":"Create a Page","description":"Add Markdown or React files to src/pages to create a standalone page:"},"tutorial-basics/deploy-your-site":{"id":"tutorial-basics/deploy-your-site","title":"Deploy your site","description":"Docusaurus is a static-site-generator (also called Jamstack)."},"tutorial-basics/markdown-features":{"id":"tutorial-basics/markdown-features","title":"Markdown Features","description":"Docusaurus supports Markdown and a few additional features."},"tutorial-extras/manage-docs-versions":{"id":"tutorial-extras/manage-docs-versions","title":"Manage Docs Versions","description":"Docusaurus can manage multiple versions of your docs."},"tutorial-extras/translate-your-site":{"id":"tutorial-extras/translate-your-site","title":"Translate your site","description":"Let\'s translate docs/intro.md to French."},"welcome":{"id":"welcome","title":"Welcome","description":"Welcome to the documentation for Avalonia, a cross-platform .NET framework for building beautiful, modern graphical user interfaces (GUIs). With Avalonia, you can create native applications for Windows, macOS, Linux, iOS, Android, and WebAssembly, all from a single codebase."}}}')}}]);